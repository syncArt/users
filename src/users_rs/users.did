type AppDataEnum = variant {
  ThruToday : ThruToday;
  Smileyball : SmileyballInput;
  General;
};
type AppTypeEnum = variant { ThruToday; Smileyball; General };
type AppsData = record {
  registry : vec record { text; AppDataEnum };
  connected_apps : vec AppTypeEnum;
};
type BadgeRecord = record {
  contest_id : nat64;
  awarded_at : nat64;
  song_id : nat64;
};
type GeneralInfo = record { nickname : text; description : opt text };
type Meals = record {
  breakfast : text;
  lunch : text;
  snacks : text;
  dinner : text;
};
type NoteRecord = record {
  meals : Meals;
  to_do : vec ToDo;
  mood : int8;
  score : int8;
  top3goals : vec text;
  notes : text;
  hydration : int8;
  schedule : vec text;
  notes_for_tomorrow : text;
  follow_ups : vec text;
};
type Result = variant { Ok : vec User; Err : text };
type Result_1 = variant { Ok : opt AppDataEnum; Err : text };
type Result_2 = variant { Ok : GeneralInfo; Err : text };
type Result_3 = variant { Ok : opt principal; Err : text };
type Result_4 = variant { Ok : User; Err : text };
type Result_5 = variant { Ok : text; Err : text };
type SmileyballInput = record {
  is_suspended : opt bool;
  won_badges : vec BadgeRecord;
  voted_songs : vec record { nat64; VotedSongRecord };
  created_contests : vec nat64;
};
type ThruToday = record {
  is_suspended : bool;
  historical_data : vec NoteRecord;
  live_data : vec NoteRecord;
};
type ToDo = record { is_finished : bool; "text" : text };
type UpdateOrCreateUserInput = record {
  apps_data : opt AppDataEnum;
  general_info : opt GeneralInfo;
  app_type : AppTypeEnum;
};
type User = record {
  apps_data : AppsData;
  nickname : text;
  description : opt text;
};
type VotedSongRecord = record {
  voted_at : nat64;
  vote : nat8;
  song_id : nat64;
};
service : {
  get_all_users : () -> (Result) query;
  get_app_data_from_user : (principal, AppTypeEnum) -> (Result_1) query;
  get_general_info_from_user : (principal) -> (Result_2) query;
  get_principal_from_nickname : (text) -> (Result_3) query;
  get_user_from_nickname : (text) -> (Result_4) query;
  get_user_from_principal : (principal) -> (Result_4) query;
  remove : (principal) -> (Result_5);
  update : (principal, UpdateOrCreateUserInput) -> (Result_4);
  whoami : () -> (principal) query;
}
