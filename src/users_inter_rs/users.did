type AppDataEnum = variant {
  ThruToday : ThruToday;
  Smileyball : Smileyball;
  General;
};
type AppTypeEnum = variant { ThruToday; Smileyball; General };
type AppsData = record {
  registry : vec record { text; AppDataEnum };
  connected_apps : vec AppTypeEnum;
};
type ContestData = record {
  voted : opt vec ContestRecord;
  lobby : opt vec ContestRecord;
  historical_data : opt vec ContestRecord;
};
type ContestRecord = record {
  added_at : text;
  moodmoji : opt Moodmoji;
  song_id : text;
};
type GeneralInfo = record { nickname : text; description : opt text };
type Meals = record {
  breakfast : text;
  lunch : text;
  snacks : text;
  dinner : text;
};
type Mood = record {
  background : text;
  secondary_emoji : text;
  name : text;
  primary_emoji : text;
};
type Moodmoji = record { data : vec vec text; mood : Mood };
type NoteRecord = record {
  meals : Meals;
  to_do : vec ToDo;
  mood : int8;
  score : int8;
  top3goals : vec text;
  notes : text;
  hydration : int8;
  schedule : vec text;
  notes_for_tomorrow : text;
  follow_ups : vec text;
};
type Result = variant { Ok : User; Err : text };
type Result_1 = variant { Ok : opt AppDataEnum; Err : text };
type Result_2 = variant { Ok : GeneralInfo; Err : text };
type Smileyball = record {
  is_suspended : opt bool;
  contest : opt ContestData;
  moodmoji : opt Moodmoji;
};
type ThruToday = record {
  is_suspended : bool;
  historical_data : vec NoteRecord;
  live_data : vec NoteRecord;
};
type ToDo = record { is_finished : bool; "text" : text };
type UpdateOrCreateUserInput = record {
  apps_data : opt AppDataEnum;
  general_info : opt GeneralInfo;
  app_type : AppTypeEnum;
};
type User = record {
  apps_data : AppsData;
  nickname : text;
  description : opt text;
};
service : {
  getSelf : () -> (Result);
  get_app_data_from_user : (AppTypeEnum) -> (Result_1);
  get_general_info_from_user : () -> (Result_2);
  get_user_by_nickname : (text) -> (Result);
  update : (UpdateOrCreateUserInput) -> (Result);
}
