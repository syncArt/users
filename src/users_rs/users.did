type AppsData = record {
  thru_today : opt ThruToday;
  smileyball : opt Smileyball;
  connected_apps : opt vec text;
};
type ContestData = record {
  voted : vec ContestRecord;
  lobby : vec ContestRecord;
  historical_data : vec ContestRecord;
};
type ContestRecord = record {
  added_at : text;
  moodmoji : Moodmoji;
  song_id : text;
};
type Meals = record {
  breakfast : text;
  lunch : text;
  snacks : text;
  dinner : text;
};
type Mood = record {
  background : text;
  secondary_emoji : text;
  name : text;
  primary_emoji : text;
};
type Moodmoji = record { data : vec vec text; mood : Mood };
type NoteRecord = record {
  meals : Meals;
  to_do : vec ToDo;
  mood : int8;
  score : int8;
  top3goals : vec text;
  notes : text;
  hydration : int8;
  schedule : vec text;
  notes_for_tomorrow : text;
  follow_ups : vec text;
};
type Result = variant { Ok : vec User; Err : text };
type Result_1 = variant { Ok : opt principal; Err : text };
type Result_2 = variant { Ok : User; Err : text };
type Result_3 = variant { Ok : text; Err : text };
type Smileyball = record {
  is_suspended : opt bool;
  contest : opt ContestData;
  moodmoji : Moodmoji;
};
type ThruToday = record {
  is_suspended : bool;
  historical_data : vec NoteRecord;
  live_data : vec NoteRecord;
};
type ToDo = record { is_finished : bool; "text" : text };
type User = record {
  apps_data : opt AppsData;
  nickname : text;
  description : text;
};
service : {
  get_all_users : () -> (Result) query;
  get_principal_from_nickname : (text) -> (Result_1) query;
  get_user_from_nickname : (text) -> (Result_2) query;
  get_user_from_principal : (principal) -> (Result_2) query;
  remove : (principal) -> (Result_3);
  update : (principal, User) -> (Result_2);
}
